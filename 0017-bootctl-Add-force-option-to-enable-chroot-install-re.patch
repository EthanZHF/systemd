From fde2b8076cfbfe2b9959150ae5872b8cd4196d7a Mon Sep 17 00:00:00 2001
From: Ikey Doherty <michael.i.doherty@intel.com>
Date: Wed, 23 Sep 2015 03:36:36 +0100
Subject: [PATCH 17/39] bootctl: Add --force option to enable chroot
 install/remove of sd-boot

This change enables the force-installation, removal, and update of the
systemd EFI boot binaries and supporting assets, without requiring verification
of the ESP.

Prior to this change it is assumed the target path is an ESP that can be probed,
however this requires several virtual filesystems to be present and mounted,
which may not be possible during filesystem image generation, or even for use
within eltorito alt sections of an ISO.

Given that an image invocation of bootctl may involve a host that has older,
or even absent files required by bootctl (such as EFI files), it is not always
safe to assume one can use the --path option. This change ensures that the
utility can be used in a consistent manner, in a bare chroot (no virtual
filesystems), without the need for custom systemd-boot installation routines
currently seen in many places; i.e bootctl both sets and enforces the standard
for its installation, configuration and layout.
---
 src/boot/bootctl.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/src/boot/bootctl.c b/src/boot/bootctl.c
index 233bc8029..1780b4990 100644
--- a/src/boot/bootctl.c
+++ b/src/boot/bootctl.c
@@ -967,11 +967,14 @@ static int help(int argc, char *argv[], void *userdata) {
         return 0;
 }
 
+static bool arg_force = false;
+
 static int parse_argv(int argc, char *argv[]) {
         enum {
                 ARG_PATH = 0x100,
                 ARG_VERSION,
                 ARG_NO_VARIABLES,
+                ARG_FORCE,
         };
 
         static const struct option options[] = {
@@ -979,6 +982,7 @@ static int parse_argv(int argc, char *argv[]) {
                 { "version",      no_argument,       NULL, ARG_VERSION      },
                 { "path",         required_argument, NULL, ARG_PATH         },
                 { "no-variables", no_argument,       NULL, ARG_NO_VARIABLES },
+                { "force",        no_argument,       NULL, ARG_FORCE        },
                 { NULL,           0,                 NULL, 0                }
         };
 
@@ -1006,6 +1010,9 @@ static int parse_argv(int argc, char *argv[]) {
                 case ARG_NO_VARIABLES:
                         arg_touch_variables = false;
                         break;
+                case ARG_FORCE:
+                        arg_force = true;
+                        break;
 
                 case '?':
                         return -EINVAL;
@@ -1128,7 +1135,7 @@ static int verb_install(int argc, char *argv[], void *userdata) {
                 }
         }
 
-        if (arg_touch_variables)
+        if (arg_touch_variables && !arg_force)
                 r = install_variables(arg_path,
                                       part, pstart, psize, uuid,
                                       "/EFI/systemd/systemd-boot" EFI_MACHINE_TYPE_NAME ".efi",
@@ -1151,7 +1158,7 @@ static int verb_remove(int argc, char *argv[], void *userdata) {
 
         r = remove_binaries(arg_path);
 
-        if (arg_touch_variables) {
+        if (arg_touch_variables && !arg_force) {
                 int q;
 
                 q = remove_variables(uuid, "/EFI/systemd/systemd-boot" EFI_MACHINE_TYPE_NAME ".efi", true);
-- 
2.13.3

