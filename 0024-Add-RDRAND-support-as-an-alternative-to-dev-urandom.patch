From 0bb849351e56f538b35fb70bb780bae550acb2ca Mon Sep 17 00:00:00 2001
From: Jim Kukunas <james.t.kukunas@linux.intel.com>
Date: Tue, 7 Jun 2016 17:56:31 -0400
Subject: [PATCH 24/32] Add RDRAND support as an alternative to /dev/urandom

---
 Makefile.am               |  9 +++++
 configure.ac              | 32 ++++++++++++++++++
 src/basic/random-rdrand.c | 83 +++++++++++++++++++++++++++++++++++++++++++++++
 src/basic/random-util.c   | 23 ++++++++-----
 src/basic/random-util.h   | 28 ++++++++++++++--
 5 files changed, 165 insertions(+), 10 deletions(-)
 create mode 100644 src/basic/random-rdrand.c

diff --git a/Makefile.am b/Makefile.am
index 94b08f51e..eadadfed3 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1200,6 +1200,15 @@ libfirewall_la_LIBADD = \
 endif
 
 # -----------------------------------------------------------------------------
+if USE_RDRAND
+libbasic_la_SOURCES += \
+	src/basic/random-rdrand.c
+
+libbasic_la_CFLAGS += \
+	$(RDRAND_CFLAGS)
+endif
+
+# -----------------------------------------------------------------------------
 if ENABLE_LDCONFIG
 dist_systemunit_DATA += \
 	units/ldconfig.service
diff --git a/configure.ac b/configure.ac
index a98532d92..ce1ec0ba2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1265,6 +1265,38 @@ AC_DEFINE_UNQUOTED(DEFAULT_DNSSEC_MODE, [$mode], [Default DNSSEC mode])
 AC_SUBST(DEFAULT_DNSSEC_MODE)
 
 # ------------------------------------------------------------------------------
+have_rdrand=no
+have_rdrand_intrinsics=no
+RDRAND_CFLAGS="-mrdrnd"
+
+save_cflags=$CFLAGS
+CFLAGS="$RDRAND_CFLAGS $CFLAGS"
+AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+	#include <immintrin.h>
+	int main(void)
+	{
+		int val;
+		while (_rdrand32_step(&val) == 0) {} 
+		return val;
+	}
+]])], have_rdrand_intrinsics=yes)
+CFLAGS=$save_cflags
+
+AC_ARG_ENABLE(rdrand,
+	AS_HELP_STRING([--enable-rdrand], [enable rdrand support]),
+	[enable_rdrand=$enableval], [enable_rdrand=no])
+
+if test "x$enable_rdrand" = "xno"; then
+	have_rdrand_intrinsics=disabled
+fi
+
+if test "x$have_rdrand_intrinsics" = "xyes"; then
+	AC_DEFINE(USE_RDRAND, 1, [Define for RDRAND support])
+fi
+AM_CONDITIONAL(USE_RDRAND, [test "x$have_rdrand_intrinsics" = "xyes"])
+AC_SUBST(RDRAND_CFLAGS)
+
+# ------------------------------------------------------------------------------
 have_networkd=no
 AC_ARG_ENABLE(networkd, AS_HELP_STRING([--disable-networkd], [disable networkd]))
 AS_IF([test "x$enable_networkd" != "xno"], [
diff --git a/src/basic/random-rdrand.c b/src/basic/random-rdrand.c
new file mode 100644
index 000000000..22f254fdb
--- /dev/null
+++ b/src/basic/random-rdrand.c
@@ -0,0 +1,83 @@
+/*
+ *
+ */
+#include <config.h>
+#include "random-util.h"
+
+#ifdef USE_RDRAND
+
+#include <stdint.h>
+#include <immintrin.h>
+#include <cpuid.h>
+
+int cpu_has_rdrand(void)
+{
+        static int rdrand_support = -1;
+
+        if (rdrand_support == -1) {
+                unsigned a, b, c, d;
+
+                __get_cpuid(1, &a, &b, &c, &d);
+                if (c & bit_RDRND)
+                        rdrand_support = 1;
+                else
+                        rdrand_support = 0;
+        }
+        return rdrand_support;
+}
+
+uint16_t rdrand_16(void)
+{
+        uint16_t val;
+
+        while (_rdrand16_step(&val) == 0) {}
+        return val;
+}
+
+uint32_t rdrand_32(void)
+{
+        uint32_t val;
+
+        while (_rdrand32_step(&val) == 0) {}
+        return val;
+}
+
+uint64_t rdrand_64(void)
+{
+        uint64_t val;
+        unsigned long long lval;
+
+        while (_rdrand64_step(&lval) == 0) {}
+        val = (uint64_t)lval;
+        return val;
+}
+
+void random_rdrand(void *p, size_t n)
+{
+        uint8_t *q = p;
+
+        while (n >= 8) {
+                *(uint64_t *)q = rdrand_64();
+                n -= 8;
+                q += 8;
+        }
+
+        while (n >= 4) {
+                *(uint32_t *)q = rdrand_32();
+                n -= 4;
+                q += 4;
+        }
+
+        if (n >= 2) {
+                *(uint16_t *)q = rdrand_16();
+                n -= 2;
+                q += 2;
+        }
+
+        if (n == 1) {
+                uint8_t t = (rdrand_16() & 0xFF);
+                *q = t;
+        }
+}
+
+#endif
diff --git a/src/basic/random-util.c b/src/basic/random-util.c
index ad7b3eedf..ce26f312e 100644
--- a/src/basic/random-util.c
+++ b/src/basic/random-util.c
@@ -119,15 +119,22 @@ void random_bytes(void *p, size_t n) {
         uint8_t *q;
         int r;
 
-        r = dev_urandom(p, n);
-        if (r >= 0)
-                return;
+#ifdef USE_RDRAND
+        if (cpu_has_rdrand())
+                random_rdrand(p, n);
+        else
+#endif
+        {
+                r = dev_urandom(p, n);
+                if (r >= 0)
+                        return;
 
-        /* If some idiot made /dev/urandom unavailable to us, he'll
-         * get a PRNG instead. */
+                /* If some idiot made /dev/urandom unavailable to us, he'll
+                 * get a PRNG instead. */
 
-        initialize_srand();
+                initialize_srand();
 
-        for (q = p; q < (uint8_t*) p + n; q ++)
-                *q = rand();
+                for (q = p; q < (uint8_t*) p + n; q ++)
+                        *q = rand();
+        }
 }
diff --git a/src/basic/random-util.h b/src/basic/random-util.h
index 3cee4c501..9d5ad07fc 100644
--- a/src/basic/random-util.h
+++ b/src/basic/random-util.h
@@ -22,18 +22,42 @@
 #include <stddef.h>
 #include <stdint.h>
 
+#ifdef USE_RDRAND
+extern int cpu_has_rdrand(void);
+extern uint16_t rdrand_16(void);
+extern uint32_t rdrand_32(void);
+extern uint64_t rdrand_64(void);
+extern void random_rdrand(void *p, size_t n);
+#endif
+
 int dev_urandom(void *p, size_t n);
 void random_bytes(void *p, size_t n);
 void initialize_srand(void);
 
 static inline uint64_t random_u64(void) {
         uint64_t u;
-        random_bytes(&u, sizeof(u));
+
+#ifdef USE_RDRAND
+        if (cpu_has_rdrand())
+                u = rdrand_64();
+        else
+#endif
+        {
+                random_bytes(&u, sizeof(u));
+        }
         return u;
 }
 
 static inline uint32_t random_u32(void) {
         uint32_t u;
-        random_bytes(&u, sizeof(u));
+
+#ifdef USE_RDRAND
+        if (cpu_has_rdrand())
+                u = rdrand_32();
+        else
+#endif
+        {
+                random_bytes(&u, sizeof(u));
+        }
         return u;
 }
-- 
2.12.2

